---
import { get_data_url } from '../minio';

async function fetchData() {
  try {
    const presignedUrl = await get_data_url();
    return presignedUrl;
  } catch (err) {
    console.error(err);
    return null;
  }
}

const results = await fetchData();
---

 <div>
  <!-- <ul> -->
   <ul class="columns-2 md:columns-3 lg:columns-4 xl:columns-5  sm:mr-4 sm:ml-4" >
    {results && results.length > 0 ? (
      results.map((url, index) => {
        return (
          <li data-order={index} >
            <img src={url} alt={`Image ${index}`} width="100%" height="auto" />
          </li>
        );
      })
    ) :(
      <p>No images available</p>
    )}
  </ul>
</div>

<div id="loadingIndicator" style="display: none; text-align: center; padding: 10px;">
  Loading...
</div>

<script>
 function isScrollAtBottom(): boolean {
  const scrollHeight = document.documentElement.scrollHeight;
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  const windowHeight = window.innerHeight;

  // ページの下部に近づいたら true を返す（100ピクセルの余裕を持たせて）
  return scrollTop + windowHeight >= scrollHeight - 100;
}

// ローディングインジケーターを表示する関数
function showLoadingIndicator() {
  const loadingIndicator = document.getElementById('loadingIndicator');
  if (loadingIndicator) {
    loadingIndicator.style.display = 'block';
  }
}

// スクロールイベントの監視
window.addEventListener('scroll', () => {
  if (isScrollAtBottom()) {
    // ユーザーがスクロールしてページの最下部に達し、引っ張った状態かを確認
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const windowHeight = window.innerHeight;
    const scrollHeight = document.documentElement.scrollHeight;

    if (scrollTop + windowHeight >= scrollHeight) {
      showLoadingIndicator();
      // ここでデータを非同期にロードする処理を追加することができます
    }
  }
});
</script>

<style>

  ul {
    list-style: none;
    margin: 20px;
    padding: 0;
  }

  li {
    margin: 20px auto;
  }
  li::before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    /* background-color: #fcc; */
    transform: translateY(30px);
    opacity: 0;
  }
  li.active::before {
    transform: translateY(0);
    opacity: 1;
  }
</style>